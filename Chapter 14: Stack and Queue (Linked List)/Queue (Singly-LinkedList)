main.py
from Node import Node
from LinkedList import LinkedList

class Queue:
    def __init__(self):
        self.list = LinkedList()

    def enqueue(self, new_item):
        new_node = Node(new_item)

        self.list.append(new_node)

    def dequeue(self):
        dequeued_item = self.list.head.data
        self.list.remove_after()

        return dequeued_item


num_queue = Queue()

num_queue.enqueue(17)
num_queue.enqueue(24)
num_queue.enqueue(18)

print('Queue after enqueue:', end=" ")
node = num_queue.list.head
while node is not None:
    print(node.data, end=" ")
    node = node.next
print()

dequeued_item = num_queue.dequeue()
print('Dequeued:', dequeued_item)

print('Queue after dequeue:', end=" ")
node = num_queue.list.head
while node is not None:
    print(node.data, end=" ")
    node = node.next
print()


LinkedList.py
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def prepend(self, new_node):
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head = new_node

    def remove_after(self):
        if self.head is None:
            return
        else:
            successor_node = self.head.next
            self.head = successor_node
        return

    def append(self,new_node):
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node

Node.py
class Node:
    def __init__(self, value):
        self.data = value
        self.next = None
