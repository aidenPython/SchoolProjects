main.py
from Node import Node
from LinkedList import LinkedList

class Stack:
    def __init__(self):
        self.list = LinkedList()

    def push(self, item):
        new_node = Node(item)
        self.list.prepend(new_node)

    def pop(self):
        popped_item = self.list.head.data

        self.list.remove_after()
        return popped_item

num_stack = Stack()
num_stack.push(45)
num_stack.push(56)
num_stack.push(11)

print('Stack after push: ', end=" ")
node = num_stack.list.head
while node is not None:
    print(node.data, end=" ")
    node = node.next
print()

popped_item = num_stack.pop()
print('Popped:', popped_item)

print('Stack after pop: ', end=" ")
node = num_stack.list.head
while node is not None:
    print(node.data, end=" ")
    node = node.next
print()



LinkedList.py
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def prepend(self, new_node):
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head = new_node

    def remove_after(self):
        if self.head is None:
            return
        else:
            successor_node = self.head.next
            self.head = successor_node

        return

Node.py


class Node:
    def __init__(self, value):
        self.data = value
        self.next = None
